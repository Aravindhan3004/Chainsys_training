DECLARE
  l_customer_name customer_PERSONAL_INFO_2605.CUSTOMER_name%TYPE;
  l_CUSTOMER_ID customer_PERSONAL_INFO_2605.CUSTOMER_ID%TYPE;
BEGIN
  SELECT
    CUSTOMER_name, CUSTOMER_ID
  INTO
    l_customer_name, l_CUSTOMER_ID
  FROM
    customer_PERSONAL_INFO_2605;
--  WHERE
--    customer_id = &CUSTOMER_ID;
  DBMS_OUTPUT.PUT_LINE(l_customer_name || ' : ' ||l_CUSTOMER_ID  );
END;

-----
DECLARE 
    C CUSTOMER_PERSONAL_INFO_2605%ROWTYPE;
BEGIN
    SELECT CUSTOMER_ID,CUSTOMER_NAME
    INTO C.CUSTOMER_ID,C.CUSTOMER_NAME
    FROM CUSTOMER_PERSONAL_INFO_2605
    WHERE CUSTOMER_ID =&ID;
    DBMS_OUTPUT.PUT_LINE( C.CUSTOMER_ID || ' : ' || C.CUSTOMER_NAME );
END;

---
DECLARE 
    C CUSTOMER_PERSONAL_INFO_2605%ROWTYPE;
BEGIN
    SELECT CUSTOMER_ID,CUSTOMER_NAME,gender
    INTO C.CUSTOMER_ID,C.CUSTOMER_NAME,c.gender
    FROM CUSTOMER_PERSONAL_INFO_2605
    WHERE gender ='M';
    DBMS_OUTPUT.PUT_LINE( C.CUSTOMER_ID || ' : ' || C.CUSTOMER_NAME );
END;

----
VARIABLE LG NUMBER;
DECLARE 
    A NUMBER(10) := 500;
BEGIN
    :LG:=A/2;
    DBMS_OUTPUT.put_line(:LG);
END;

BEGIN
    :LG := 100;
    DBMS_OUTPUT.put_line('VALUE IS ' ||:LG);
END;
----
DECLARE
    -- declare an associative array type
    TYPE t_capital_type 
        IS TABLE OF VARCHAR2(100) 
        INDEX BY VARCHAR2(50);
    -- declare a variable of the t_capital_type
    t_capital t_capital_type;
    -- local variable
    l_country VARCHAR2(50);
BEGIN
    
    t_capital('USA')            := 'Washington, D.C.';
    t_capital('United Kingdom') := 'London';
    t_capital('Japan')          := 'Tokyo';
    
    l_country := t_capital.FIRST;
    
    WHILE l_country IS NOT NULL LOOP
        dbms_output.put_line('The capital of ' || 
            l_country || 
            ' is ' || 
            t_capital(l_country));
        l_country := t_capital.NEXT(l_country);
    END LOOP;
END;
-----
-- 7 NESTED TABLES
declare
    type number_tab is table of number;
    numb_list number_tab := number_tab(23,56,34,890,21);
begin
    for indx in numb_list.first..numb_list.last loop
        dbms_output.put_line(numb_list(indx));
    end loop;
    numb_list.delete(2);
    numb_list.delete(4);
    dbms_output.put_line('AFTER DELETION');
    for indx in numb_list.first..numb_list.last loop
        if numb_list.exists(indx) then
            dbms_output.put_line(numb_list(indx));
        end if;
    end loop;
end;
